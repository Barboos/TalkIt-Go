package actions

import (
	"errors"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"s_app/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Micropost)
// DB Table: Plural (microposts)
// Resource: Plural (Microposts)
// Path: Plural (/microposts)
// View Template Folder: Plural (/templates/microposts/)

// MicropostsResource is the resource for the Micropost model
type MicropostsResource struct {
	buffalo.Resource
}

// List gets all Microposts. This function is mapped to the path
// GET /microposts
func (v MicropostsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.New("no transaction found")
	}

	microposts := &models.Microposts{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Microposts from the DB
	if err := q.All(microposts); err != nil {
		return err
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, microposts))
}

// Show gets the data for one Micropost. This function is mapped to
// the path GET /microposts/{micropost_id}
func (v MicropostsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.New("no transaction found")
	}

	// Allocate an empty Micropost
	micropost := &models.Micropost{}

	// To find the Micropost the parameter micropost_id is used.
	if err := tx.Find(micropost, c.Param("micropost_id")); err != nil {
		return c.Error(404, err)
	}
	return c.Render(200, r.Auto(c, micropost))
}

// New renders the form for creating a new Micropost.
// This function is mapped to the path GET /microposts/new
func (v MicropostsResource) New(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, &models.Micropost{}))
}

// Create adds a Micropost to the DB. This function is mapped to the
// path POST /microposts
func (v MicropostsResource) Create(c buffalo.Context) error {
	// Allocate an empty Micropost
	micropost := &models.Micropost{}

	// Bind micropost to the html form elements
	if err := c.Bind(micropost); err != nil {
		return err
	}
	uid := c.Session().Get("current_user_id")
	u := &models.User{}
	tx := c.Value("tx").(*pop.Connection)
	err := tx.Find(u, uid)
	micropost.UserID = u.ID

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.New("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(micropost)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("index.html"))
		//return c.Render(422, r.Auto(c, micropost))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", T.Translate(c, "micropost.created.success"))
	// and redirect to the index page
	return c.Redirect(302, "/")
}

// Edit renders a edit form for a Micropost. This function is
// mapped to the path GET /microposts/{micropost_id}/edit
func (v MicropostsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.New("no transaction found")
	}

	// Allocate an empty Micropost
	micropost := &models.Micropost{}

	if err := tx.Find(micropost, c.Param("micropost_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, micropost))
}

// Update changes a Micropost in the DB. This function is mapped to
// the path PUT /microposts/{micropost_id}
func (v MicropostsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.New("no transaction found")
	}

	// Allocate an empty Micropost
	micropost := &models.Micropost{}

	if err := tx.Find(micropost, c.Param("micropost_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Micropost to the html form elements
	if err := c.Bind(micropost); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(micropost)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, micropost))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", T.Translate(c, "micropost.updated.success"))
	// and redirect to the microposts index page
	return c.Render(200, r.Auto(c, micropost))
}

// Destroy deletes a Micropost from the DB. This function is mapped
// to the path DELETE /microposts/{micropost_id}
func (v MicropostsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.New("no transaction found")
	}

	// Allocate an empty Micropost
	micropost := &models.Micropost{}

	// To find the Micropost the parameter micropost_id is used.
	if err := tx.Find(micropost, c.Param("micropost_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(micropost); err != nil {
		return err
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", T.Translate(c, "micropost.destroyed.success"))
	// Redirect to the microposts index page
	return c.Render(200, r.Auto(c, micropost))
}
